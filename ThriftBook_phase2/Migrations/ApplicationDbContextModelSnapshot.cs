// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThriftBook_phase2.Data;

namespace ThriftBook_phase2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookPhoto")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookQuality")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BookQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Gennre")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoreNameNavigationStoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.HasIndex("StoreNameNavigationStoreName");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Author = "Greg Dinkin",
                            BookPhoto = "https://images-na.ssl-images-amazon.com/images/I/41z2wSFrXbL._SX326_BO1,204,203,200_.jpg",
                            BookQuality = "like new",
                            BookQuantity = 5,
                            Gennre = "Business & Investing",
                            Price = 14m,
                            StoreName = "ThriftBook",
                            Title = "Your Next Five Moves"
                        },
                        new
                        {
                            BookId = 2,
                            Author = "J.K. Rowling",
                            BookPhoto = "https://images-na.ssl-images-amazon.com/images/I/51rg5EDPpDL._SX336_BO1,204,203,200_.jpg",
                            BookQuality = "good",
                            BookQuantity = 3,
                            Gennre = "Children Books",
                            Price = 12m,
                            StoreName = "ThriftBook",
                            Title = "The Christmas Pig"
                        },
                        new
                        {
                            BookId = 3,
                            Author = "Eric Carle",
                            BookPhoto = "https://images-na.ssl-images-amazon.com/images/I/41tyokViuNL._SY355_BO1,204,203,200_.jpg",
                            BookQuality = "old",
                            BookQuantity = 2,
                            Gennre = "Children Books",
                            Price = 6.25m,
                            StoreName = "ThriftBook",
                            Title = "The Very Hungry Caterpillar"
                        },
                        new
                        {
                            BookId = 4,
                            Author = "Will Smith",
                            BookPhoto = "https://images-na.ssl-images-amazon.com/images/I/51oDyfsqKwL._SX327_BO1,204,203,200_.jpg",
                            BookQuality = "like new",
                            BookQuantity = 3,
                            Gennre = "Biographies & Memoirs",
                            Price = 10m,
                            StoreName = "ThriftBook",
                            Title = "Will"
                        },
                        new
                        {
                            BookId = 5,
                            Author = "Carl Sagan",
                            BookPhoto = "https://images-na.ssl-images-amazon.com/images/I/51IcVjsJlDL._SX322_BO1,204,203,200_.jpg",
                            BookQuality = "like new",
                            BookQuantity = 5,
                            Gennre = "Science & Math",
                            Price = 7.50m,
                            StoreName = "ThriftBook",
                            Title = "Cosmos"
                        });
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.BookInvoice", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("BookInvoice");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            TransactionId = 100001
                        },
                        new
                        {
                            BookId = 5,
                            TransactionId = 100001
                        },
                        new
                        {
                            BookId = 2,
                            TransactionId = 100002
                        },
                        new
                        {
                            BookId = 4,
                            TransactionId = 100002
                        },
                        new
                        {
                            BookId = 3,
                            TransactionId = 100003
                        },
                        new
                        {
                            BookId = 5,
                            TransactionId = 100003
                        });
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.BookRating", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("TEXT");

                    b.HasKey("BookId", "BuyerId");

                    b.HasIndex("BuyerId");

                    b.ToTable("BookRating");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            BuyerId = 1,
                            Comments = "Good Book",
                            Rating = 4.5m
                        },
                        new
                        {
                            BookId = 2,
                            BuyerId = 1,
                            Comments = "Children loved this book",
                            Rating = 4.8m
                        },
                        new
                        {
                            BookId = 3,
                            BuyerId = 2,
                            Comments = "Great read",
                            Rating = 4.3m
                        },
                        new
                        {
                            BookId = 5,
                            BuyerId = 2,
                            Comments = "Great read, good",
                            Rating = 4.9m
                        },
                        new
                        {
                            BookId = 4,
                            BuyerId = 1,
                            Comments = "Very short book",
                            Rating = 3m
                        });
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Invoice", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfTransaction")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("BookId");

                    b.HasIndex("BuyerId");

                    b.ToTable("Invoice");

                    b.HasData(
                        new
                        {
                            TransactionId = 100001,
                            BuyerId = 1,
                            DateOfTransaction = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1995),
                            TotalPrice = 21.50m
                        },
                        new
                        {
                            TransactionId = 100002,
                            BuyerId = 2,
                            DateOfTransaction = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2007),
                            TotalPrice = 22m
                        },
                        new
                        {
                            TransactionId = 100003,
                            BuyerId = 3,
                            DateOfTransaction = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1999),
                            TotalPrice = 13.75m
                        });
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Profile", b =>
                {
                    b.Property<int>("BuyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("BuyerId");

                    b.ToTable("Profile");

                    b.HasData(
                        new
                        {
                            BuyerId = 1,
                            City = "Los Angeles",
                            Email = "keanureeves@gmail.com",
                            FirstName = "Keanu",
                            LastName = "Reeves",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "90210",
                            Street = "Coldwater Canyon"
                        },
                        new
                        {
                            BuyerId = 2,
                            City = "Miami",
                            Email = "tigerking@gmail.com",
                            FirstName = "Tiger",
                            LastName = "King",
                            PhoneNumber = "210-654-3218",
                            PostalCode = "10101",
                            Street = "Sunset Blvd."
                        },
                        new
                        {
                            BuyerId = 3,
                            City = "Springfield",
                            Email = "homer.j.simpson@gmail.com",
                            FirstName = "Homer",
                            LastName = "Simpson",
                            PhoneNumber = "123-321-3165",
                            PostalCode = "12121",
                            Street = "Evergreen Terrace"
                        },
                        new
                        {
                            BuyerId = 4,
                            City = "Dragonstone",
                            Email = "emailia.clarke@gmail.com",
                            FirstName = "Daenerys",
                            LastName = "Targaryen",
                            PhoneNumber = "654-321-6458",
                            PostalCode = "13337",
                            Street = "Free Cities St."
                        },
                        new
                        {
                            BuyerId = 5,
                            City = "Shanghai",
                            Email = "ting.the.ceo@gmail.com",
                            FirstName = "Ting",
                            LastName = "Deng",
                            PhoneNumber = "765-432-2500",
                            PostalCode = "13ceo4",
                            Street = "Movecanada"
                        });
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Store", b =>
                {
                    b.Property<string>("StoreName")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("StoreName");

                    b.ToTable("Store");

                    b.HasData(
                        new
                        {
                            StoreName = "ThriftBook",
                            City = "Vancouver",
                            Email = "thriftbook@thriftbook.com",
                            PhoneNumber = "778-689-1000",
                            PostalCode = "V2W1B5",
                            Street = "Pacific Boulevard"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.Book", b =>
                {
                    b.HasOne("rolesDemoSSD.Models.Store", "StoreNameNavigation")
                        .WithMany("Books")
                        .HasForeignKey("StoreNameNavigationStoreName");

                    b.Navigation("StoreNameNavigation");
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.BookInvoice", b =>
                {
                    b.HasOne("ThriftBook_phase2.Models.Book", "Book")
                        .WithMany("BookInvoices")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rolesDemoSSD.Models.Invoice", "Invoice")
                        .WithMany("BookInvoices")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.BookRating", b =>
                {
                    b.HasOne("ThriftBook_phase2.Models.Book", "Book")
                        .WithMany("BookRatings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rolesDemoSSD.Models.Profile", "Profile")
                        .WithMany("BookRatings")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Invoice", b =>
                {
                    b.HasOne("ThriftBook_phase2.Models.Book", null)
                        .WithMany("Invoices")
                        .HasForeignKey("BookId");

                    b.HasOne("rolesDemoSSD.Models.Profile", "Profile")
                        .WithMany("Invoices")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ThriftBook_phase2.Models.Book", b =>
                {
                    b.Navigation("BookInvoices");

                    b.Navigation("BookRatings");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Invoice", b =>
                {
                    b.Navigation("BookInvoices");
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Profile", b =>
                {
                    b.Navigation("BookRatings");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("rolesDemoSSD.Models.Store", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
